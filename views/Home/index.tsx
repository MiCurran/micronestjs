import Head from 'next/head';
import { useEffect, useState } from 'react';
import classes from './home.module.css';
export default function HomeView() {
  const [game, setGame] = useState<Game>({ id: 0, isActive: false });
  const [playerOne, setPlayerOne] = useState<Player>({ id: 0, hits: 0 });
  const [playerTwo, setPlayerTwo] = useState<Player>({ id: 0, hits: 0 });
  const [winnerHere, setWinnerHere] = useState<number>(0);

  const callStartGame = async () => {
    const response = await fetch('/api/hello');
    const status = response.status;
    const data = await response.json();
    if (status === 200) {
      setGame({ ...data.data.CreateGame });
    }
  };

  const saveIdToGame = async (
    gameId: number,
    playerNumber: 1 | 2,
    playerId: number
  ) => {
    const response = await fetch(
      `/api/saveIdToGame?playerNumber=${playerNumber}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ playerId: playerId, gameId: gameId }),
      }
    );
    const data = response.json();
  };

  const callCreatePlayer = async (playerNumber: 1 | 2) => {
    const response = await fetch(`/api/createPlayer?gameId=${game.id}`);
    const data = response.json().then((data) => {
      if (playerNumber === 1) {
        setPlayerOne({ id: data.data.initPlayer.id, hits: 0 });
        saveIdToGame(game.id, playerNumber, data.data.initPlayer.id);
      } else {
        setPlayerTwo({ id: data.data.initPlayer.id, hits: 0 });
        saveIdToGame(game.id, playerNumber, data.data.initPlayer.id);
      }
    });
  };

  const sendAttack = async (playerId: number): Promise<void> => {
    const response = await fetch(`/api/sendAttack?id=${playerId}`);
    const status = response.status;
    const data = await response.json();
    if (status === 200 && playerId === playerOne.id) {
      setPlayerOne({...playerOne, hits: playerOne.hits + 1});
    }
    if (status === 200 && playerId === playerTwo.id) {
      setPlayerTwo({...playerTwo, hits: playerTwo.hits + 1});
    }
  };

  const setWinner = async (gameId: number, winnerId: number) => {
    const response = await fetch(
      `/api/updateWinner?gameId=${gameId}&winnerId=${winnerId}`
    );
    const status = response.status;
    const data = await response.json().then((data) => {
      if (status === 200 && winnerId === data.data.UpdateWinner.gameWinner) {
        setWinnerHere(data.data.UpdateWinner.gameWinner);
        console.log('We have a winner!:', winnerId);
      }
    });
  };

  const getPlayerClass = (hits: number): string | undefined => {
      let playerClass = undefined;
      if (hits > 4) {
        playerClass = classes.warning
      }
      if (hits > 7) {
        playerClass = classes.danger
      }
      return playerClass;
  }

  const isPlayerOne = winnerHere === playerOne.id;

  useEffect(() => {
    if (playerOne.hits === 10) {
      setWinner(game.id, playerOne.id);
    }
    if (playerTwo.hits === 10) {
      setWinner(game.id, playerTwo.id);
    }
  }, [game.id, playerOne.id, playerOne.hits, playerTwo.id, playerTwo.hits]);

  return (
    <>
      <Head>
        <title>poc</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main className={classes.app}>
        <div className={classes.scoreRow}>
          <h3 className={getPlayerClass(playerTwo.hits)}>player 1</h3>
          <h2>{playerOne.hits}</h2>
          <div>
            <h4>Game: {game.id}</h4>
          </div>
          <h2>{playerTwo.hits}</h2>
          <h3 className={getPlayerClass(playerOne.hits)}>player 2</h3>
        </div>
        {winnerHere !== 0 && (
          <div className={classes.winner}>
            <h2>
              We have a winner!: 🏆 {isPlayerOne ? 'Player 1' : 'Player 2'}
            </h2>
          </div>
        )}
        <div className={classes.game}>
          {!game.isActive && (
            <button onClick={async () => callStartGame()}>
              Start Game! 🚀
            </button>
          )}
          {game.isActive && (
            <div className={classes.players}>
              <div className={classes.player}>
                <button
                  className={playerOne.id !== 0 ? classes.hidden : undefined}
                  onClick={() => callCreatePlayer(1)}
                >
                  create player 1
                </button>
                {playerOne.id !== 0 && (
                  <button onClick={() => sendAttack(playerOne.id)}>
                    send player one attack ⚔️
                  </button>
                )}
              </div>
              <div className={classes.player}>
                <button
                  className={playerTwo.id !== 0 ? classes.hidden : undefined}
                  onClick={() => callCreatePlayer(2)}
                >
                  create player 2
                </button>
                {playerTwo.id !== 0 && (
                  <button onClick={() => sendAttack(playerTwo.id)}>
                    send player two attack ⚔️
                  </button>
                )}
              </div>
            </div>
          )}
        </div>
        {game.isActive && (
          <p className={classes.footer}>{JSON.stringify(game, null, 2)}</p>
        )}
      </main>
    </>
  );
};
