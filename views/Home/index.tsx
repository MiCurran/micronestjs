import Head from 'next/head';
import { useEffect, useState } from 'react';
import classes from './home.module.css'
export default function HomeView() {
  const [game, setGame] = useState({ id: 0, isActive: false });
  const [playerOne, setPlayerOne] = useState({ id: 0 });
  const [playerTwo, setPlayerTwo] = useState({ id: 0 });
  const [playerOneHits, setPlayerOneHits] = useState<number>(0);
  const [playerTwoHits, setPlayerTwoHits] = useState<number>(0);
  const [winnerHere, setWinnerHere] = useState<number>(0);

  const callStartGame = async () => {
    const response = await fetch('/api/hello');
    const status = response.status;
    const data = await response.json();
    if (status === 200) {
      setGame({ ...data.data.CreateGame });
    }
  };

  const saveIdToGame = async (
    gameId: number,
    playerNumber: 1 | 2,
    playerId: number
  ) => {
    const response = await fetch(
      `/api/saveIdToGame?playerNumber=${playerNumber}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ playerId: playerId, gameId: gameId }),
      }
    );
    const data = response.json();
  };

  const callCreatePlayer = async (playerNumber: 1 | 2) => {
    const response = await fetch(`/api/createPlayer?gameId=${game.id}`);
    const data = response.json().then((data) => {
      if (playerNumber === 1) {
        setPlayerOne({ id: data.data.initPlayer.id });
        saveIdToGame(game.id, playerNumber, data.data.initPlayer.id);
      } else {
        setPlayerTwo({ id: data.data.initPlayer.id });
        saveIdToGame(game.id, playerNumber, data.data.initPlayer.id);
      }
    });
  };

  const sendAttack = async (playerId: number): Promise<void> => {
    const response = await fetch(`/api/sendAttack?id=${playerId}`);
    const status = response.status;
    const data = await response.json();
    if (status === 200 && playerId === playerOne.id) {
      setPlayerOneHits(data.data.sendAttack.hits);
    }
    if (status === 200 && playerId === playerTwo.id) {
      setPlayerTwoHits(data.data.sendAttack.hits);
    }
  };

  const setWinner = async (gameId: number, winnerId: number) => {
    const response = await fetch(
      `/api/updateWinner?gameId=${gameId}&winnerId=${winnerId}`
    );
    const status = response.status;
    const data = await response.json().then((data) => {
      if (status === 200 && winnerId === data.data.UpdateWinner.gameWinner) {
        setWinnerHere(data.data.UpdateWinner.gameWinner);
        console.log('We have a winner!:', winnerId);
      }
    });
  };

  useEffect(() => {
    if (playerOneHits === 10) {
      setWinner(game.id, playerOne.id);
    }
    if (playerTwoHits === 10) {
      setWinner(game.id, playerTwo.id);
    }
  }, [game.id, playerOne.id, playerOneHits, playerTwo.id, playerTwoHits]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main
        className={classes.app}
      >
        <div className={classes.scoreRow}>
          <h3>player 1</h3>
          <h2>{playerOneHits}</h2>
          <div>
            <h4>Game: {game.id}</h4>
            <h3>Score</h3>
          </div>
          <h2>{playerTwoHits}</h2>
          <h3>player 2</h3>
        </div>
        <div className={classes.game}>
        {!game.isActive && 
          <button
            onClick={async () => callStartGame()}
          >
            Start Game! üöÄ
          </button>
        }
        {game.isActive && 
          <div className={classes.players}>
            <div className={classes.player}>
              <button
                className={playerOne.id !== 0 ? classes.hidden : undefined} 
                onClick={() => callCreatePlayer(1)}
              >
                create player 1
              </button>
              {playerOne.id !== 0 && 
                <button onClick={() => sendAttack(playerOne.id)}>
                  send player one attack ‚öîÔ∏è
                </button>
              }
            </div>
            <div className={classes.player}>
              <button
                className={playerTwo.id !== 0 ? classes.hidden : undefined}
                onClick={() => callCreatePlayer(2)}
              >
                create player 2
              </button>
              {playerTwo.id !== 0 && 
                <button onClick={() => sendAttack(playerTwo.id)}>
                  send player two attack ‚öîÔ∏è
                </button>
              }
            </div>
          </div>
        }
        </div>     
        {game.isActive && 
          <p className={classes.footer}>{JSON.stringify(game, null, 2)}</p>
        }
      </main>
    </>
  );
}

/// create game --> createPlayer() --> if return success then call game --> playerId retured set it in game
// call to create player --> player Service --> FE saves it in state && fires another api call to game
//  .then(res => {gameServiceCall(res.data)}).catch()

