import Head from 'next/head'
import { gql } from '@apollo/client';
import { playerGraphqlClient, gameGraphqlClient } from '../graphql';
import { useState } from 'react';

//client stuff
export default function Home({data, gameData}: {data: unknown, gameData: unknown}) {
console.log(JSON.stringify(data));
console.log(JSON.stringify(gameData));
const [game, setGame] = useState(null);

const callStartGame = async () => {
  const response = await fetch('/api/hello');
  const status = response.status;
  const data = await response.json();
  if (status === 200) {
    setGame(data);
  }
  console.log(data);
}

const callCreatePlayer = async () => {
  const response = await fetch('/api/createPlayer?gameId=2')
  const data = await response.text();
  console.log('data:',data);
}

// we have the gameid game.id 
// so now if we create palyer 1 btn 
// send gameid as a param to the player service 
// player has column gameID 

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main style={{
          display: "flex",
          flexDirection: 'column',
          height: '100vh',
          justifyContent: 'center',
          alignItems: 'center'
        }}
      >
        <button
          disabled={game !== null}
          style={{cursor: 'pointer'}}
          onClick={async () => callStartGame()}
        >
          start game
        </button>
          {game &&
            <>
            <p>{JSON.stringify(game, null, 2)}</p>
            <button
              onClick={() => callCreatePlayer()}
            >
              create player 1
            </button>
            <button>create player 2</button>
            </>
          }
          <p>{JSON.stringify(data, null, 2)}</p>
          <p>{JSON.stringify(gameData, null, 2)}</p>

      </main>
    </>
  )
}

//server side stuff 

export async function getStaticProps() {
  const { data } = await playerGraphqlClient.query({
    query: gql`
       query{sayHello}
    `,
  });
  const gameData = (await gameGraphqlClient.query({
    query: gql`
       query{FindGameById(id: 1){id}}
    `,
  })).data
  console.log(data)
  return {
    props: {
      data,
      gameData
    }
  }
}